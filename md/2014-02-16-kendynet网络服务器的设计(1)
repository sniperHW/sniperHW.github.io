我的网络服务器框架kendynet算起来已经陆陆续续写了近两年，一直都没有留下一份开发文档记录这个设计过程，趁着现在比较闲，准备写一系列的文章详细介绍kendynet的设计，免得将来连自己都忘记了当初为什么要这么设计.

编写kendynet源于对公司MMORPG项目大宋OL网关服务器的性能测试.当时大宋OL的网络层是我以前的领导用C++编写的，在做同屏玩家广播压力测试的时候发现网关服务器的负载非常差，每秒超过5W个逻辑包服务器就扛不住了.我们的服务器是在windows上开发的，使用iocp框架.为了测试iocp的基础效率我用C语言编写了一个封装了iocp的单线程网络接口.我的网络接口性能测试的结果是，对350个客户端广播，每秒200W左右的逻辑包是完全能应付的。

基于这个测试结果，我的老领导翻查代码终于把问题解决了，导致效率低下的原因是在网络层错误的使用了一个读写锁.

而我对原有服务器框架过度复杂的设计一直以来都有些不大满意，所以便准备从头实现一个新的框架.

新框架的设计首先从网络层开始,我首先选择了在linux实现一个基于epoll的网络层.

这里必须提一下的是，在很久以前我就尝试过linux下用epoll+线程池提供一个类似iocp的网络接口.
[linux类IOCP接口](http://download.csdn.net/detail/sniperhuangwei/3726754)是第二次尝试时用C++编写的版本.

虽然前两次的尝试都不能令我满意，但毕竟让我增长了很多经验.<a href="http://sniperhw.github.io/#!/2012/04/07/kqueue epoll 边界触发模式的网络编程模型">kqueue epoll 边界触发模式的网络编程模型</a>就是在总结之后写出来的,其中模式(1)(2)就是模仿iocp的,让我比较满意的[实现代码](https://github.com/sniperHW/epoll_mutilthread).

最终,我选择了使用模式(3),也就是每线程一个event loop的方式来实现网络层.其中的原因是模式(1)(2)的现实相对来说比(3)更复杂，并且无法避免锁的使用.所以我选择了模式(3)来实现一个最基础的单线程接口，多线程网络留到上层去处理.而这个基础接口在linux和windows上是基本兼容的.最初的设计可以参看[kendylib](https://github.com/sniperHW/kendylib),其中的网络层同时支持windows和linux.

现在整个服务器框架经过了比较大的重构，已经挪到了新的项目[luanet](https://github.com/sniperHW/luanet)中，并且暂时将对windows的支持去掉了.我的另外一个实验项目[nodelua](https://github.com/sniperHW/nodelua)中的网络部分也使用了kendynet.

本篇作为这个系列的开篇，简单介绍一下kendynet的发展过程，下一篇将会进入正题.



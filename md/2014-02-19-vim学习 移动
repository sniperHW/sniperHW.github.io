####简单移动

`w` 移动到下一个单词的词首

`b` 移动到前一个单词的词首

`e` 移动到下一个单词的词末

`ge` 移动到前一个单词的词末

`$`,`<End>` 移动到当前行的行尾

`^` 移动到当前行第一个非空字符

`0`(注意是数字),`<Home>` 移动到当前行的第一个字符

`f字符x` 向前(右)查找本行中的字符x,把光标停留在x上

`F字符x` 向后(左)查找本行中的字符x,把光标停留在x上

`t字符x` 向前(右)查找本行中的字符x,把光标停留在x的前一个字符上

`T字符x` 向后(左)查找本行中的字符x,把光标停留在x的后一个字符上

以上四个命令可以通过 `;` 重复, `,` 则用于反向重复.

`%` 寻找匹配的括号

`数字G` 移动到文件的数字行上

`H` 移动到视野(屏幕)内的第一行

`M` 移动到视野(屏幕)内的中间

`L` 移动到视野(屏幕)内的最后一行

`CTRL-G` 显示当前所在位置信息

`:set number` 显示行号

`:set nonumber` 关闭行号显示

`:set ruler` 在屏幕右下角显示当前光标位置

`CTRL-U` 向上滚动半屏

`CTRL-D` 向下滚动半屏

`CTRL-E` 向下滚动一行

`CTRL-Y` 向上滚动一行

`CTRL-F` 向下滚动一屏

`CTRL-B` 向上滚动一屏

`zz` 让当前行显示在屏幕中间

`zt` 让当前行显示在屏幕顶部

`zb` 让当前行显示在屏幕底部

####简单查找

`/String` 查找String

`n` 向前查找下一个匹配项

`?String` 反向查找String

`N` 反向查找下一个匹配项

`:set ignorecase` 查找忽略大小写

`:set ignorecase` 取消查找忽略大小写

把光标移动到单词下输入 `*` 向前查找当前单词 `#` 向后查找当前单词

`/String\>` 只匹配String在词末

`/\<String` 只匹配String在词首

`/\<String\>` 全词匹配

`:set hlsearch` 高亮显示查找匹配项

`:set nohlsearch` 关闭高亮显示查找匹配项

`:nohlsearch` 关闭本次高亮显示，下次查找时又会开启

`:set incsearch` 输入字符串的过程中就显示匹配点

`:set nowrapscan` 找到文件尾后停止查找

####简单的查找模式

`/^include` 匹配在一行开始的include

`/$include` 匹配在行尾的include

`.` 匹配任何单个字符

特殊字符用`\`转意

####使用标记

<code>\`\`</code> 和 `''` 回到上一个跳转点

如果你当前在a处，之后跳转到b处,则 <code>\`\`</code> 会让你跳回a出,如果你再次输入<code>\`\`</code>会让你又跳回b处.


`CTRL-O` 跳转到一个较老的地方

`CTRL-I` 跳转到以各较新的地方


与 <code>\`\`</code> 和 `''` 不同,`CTRL-O`会一直往后跳,`CTRL-I`则一直往前跳.

`:jumps` 显示可以跳往的位置列表,最后使用的标记用`>`标记出来

vim可以在文本中自定义26个标记(a到z)

标记使用方式,`m字符`,在当前光标处设置标记.<code>`</code>字符 移动到标记字符处

`:marks` 显示所有标记的列表





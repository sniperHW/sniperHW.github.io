####快速排序

快排的详细介绍[见](http://zh.wikipedia.org/zh/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F),简单的说就是取输入序列中的首元素m,然后将除首元素m以外的其它元素分成两组,小于等于m的一组和大于m的一组.将3组元素组合成输入队列:小于等于m + m + 大于m.

下面看一个用haskell实现的快速排序代码:

    quicksort :: (Ord a) => [a] -> [a]   
    quicksort [] = []   
    quicksort (x:xs) =   
      let smallerSorted = quicksort [a | a <- xs, a <= x]  
          biggerSorted = quicksort [a | a <- xs, a > x]   
      in smallerSorted ++ [x] ++ biggerSorted

haskell中有列表解析(List Comprehension)的支持,所以`smallerSorted`和`biggerSorted`两个集合通过列表解析很方便的就生成了.而Scheme中没有列表解析,所以首先要实现一个类似列表解析的功能将附后条件的列表元素筛选出来:


    (define my-filter
        (lambda (f l)	
            (define iter
                (lambda (l a)
                    (if (not (pair? l)) a
                        (let* ([h (car l)] [r (if (f h) (append a (list h)) a)])
                                (iter (cdr l) r)))))
            (iter l '())))
            
filter的功能是输入一个条件判断函数f和一个列表l,filter将l中所有满足f的元素组成一个列表并返回.上面代码使用的是`accumulator`模式,也就是在迭代模式,通过传进一个a参数在每次递归调用中保存结果.可以注意到这个filter的定义是满足尾递归的.

下面是filter的递归版本:

    (define my-filter
        (lambda (f l)
            (if (not (pair? l)) '()
                (let ([h (car l)])
                    (if (f h) (cons h (filter f (cdr l)))
        (filter f (cdr l)))))))
                        
通过cps变换将上述函数转换成尾递归的:

    (define my-filter
        (lambda (f l)
            (define cps
                (lambda (l k)
                    (if (not (pair? l)) (k '())
                        (let ([h (car l)])
                            (if (f h) (cps (cdr l) (lambda (x) (k (cons h x))))
                                (cps (cdr l) (lambda (x) (k x))))))))
        (cps l (lambda (x) x))))
                        


有了filter之后我们就可以实现qsort了:

    (define qsort
        (lambda (l)
            (if (not (pair? l)) '()
                (let* ([m (car l)]
                       [large (my-filter (lambda (x) (if (> x m) #t #f)) (cdr l))]
                       [less (my-filter (lambda (x) (if (<= x m) #t #f)) (cdr l))])
                (append (qsort less) (cons m (qsort large)))))))
                
    >(qsort `(5 1 4 2 3 3 7)) -> (1 2 3 3 4 5 7)


比较下与haskell版的区别,首先是没有列表解析,其次是没有模式匹配,需要用if表达式处理.

当然haskell中也是有filter的,下面就是haskell快排的filter版本:

    quicksort :: (Ord a) => [a] -> [a]     
    quicksort [] = []     
    quicksort (x:xs) =      
        let smallerSorted = quicksort (filter (<=x) xs) 
            biggerSorted = quicksort (filter (>x) xs)    
        in  smallerSorted ++ [x] ++ biggerSorted

在引haskell中fold后代码可以更加简洁和高效：

	(define (foldl f init xs)
		(define (iter xs acc)
			(if (null? xs) acc
				(iter (cdr xs) (f acc (car xs)))))
		(iter xs init))
	
	(define (foldr f init xs)
		(define (iter xs acc)
			(if (null? xs) acc
				(iter (cdr xs) (f (car xs) acc))))
		(iter (reverse xs) init))
	
	(define (qsort l greater)
		(if (not (pair? l)) '()
			(let ([m (car l)]
			     [partition (foldr (lambda (x acc)
					         (let ([small (car acc)]
						       [large (cadr acc)])
						 (if (greater x m) (list small (cons x large))
						     (list (cons x small) large))))
					'(()()) (cdr l))])  
			(append (qsort (car partition) greater) 
			        (cons m (qsort (cadr partition) greater))))))




####冒泡排序

相对于快速排序的简介,冒泡排序就复杂多了,首先回顾一下冒泡排序的步骤:

* 将第一个元素与第二个元素比较,如果(1) > (2)则交换(1)(2)的位置,然后用(2)跟(3)比较,依此类推直到最后一个元素,此时最后一个元素处于正确的位置上
* 将数组长度减1,重复上面的过程,完毕后倒数第二个元素处于正确的位置上.
* 重复上面的过程直到数组长度==1

下面先贴出一段Scheme的实现,这个实现并没有使用set!去改变list的元素:

    (define bubble
        (lambda (l)
            (define pass
                (lambda (l left)
                    (cond 			
                        [(> (length l) 2) (let ([first (car l)]
                                                [second (cadr l)]
                                                [remain (cddr l)])
                                            (if (< first second) (pass (cons second remain) (cons first left))
                                            (pass (cons first remain) (cons second left))))]
                        [(= (length l) 2) (let ([first (car l)]
                                                [second (cadr l)]) 
                                           (if (< first second) (list (cons first left) second) (list (cons second left) first)))]
                        [else (list left (car l))])))						
            (define iter
                (lambda (l result)
                    (if (= (length l) 0) l
                    (let* ([passres (pass l '())]
                           [left (car passres)]
                           [max (cdr passres)])
                          (if (= (length left) 0) (append max result)
                              (iter left (append max result)))))))

            (iter l `())))						

先定义了一个局部过程`pass`，它的作用是把输出列表分成两部分,一个最大值和其余元素,例如:

	(pass '(1 3 2 4) '()) -> ((3 2 1) 4)

pass过程相当于上面文字描诉的第一步,接着的局部函数iter对应了文字描诉的2,3步.参数result用于存放排序后的结果.第一次调用时结果为'(),剩余元素就是输入列表.然后调用pass将list分成两部分left和max.如果left的长度为0,相当于到达终止条件数组长度==1,将max添加到result中然后返回.
否则继续在left上执行递归.

对应的haskell版本:

    bubble :: (Ord a) => [a] -> [a]
    bubble []  = error "Can't call pass on an empty list, dummy!"
    bubble (x:[]) = [x]
    bubble xs = iter xs []
           where 
            pass xs left		
                | size == 2 = if first < second then (first:left,second)
                                 else (second:left,first)
                | size > 2 =  let remain = tail (tail xs) in
                              if first < second then pass (second:remain) (first:left)
                                 else pass (first:remain) (second:left)
                | size == 1 = ([],first)				   					 
                where 
                      size  = length xs
                      first = head xs
                      second = head (tail xs)				  	   	   
            iter xs result =
                let 
                    passret = (pass xs [])
                    left = fst passret
                    max = snd passret 
                in 
                    if length left == 0 then (max:result)
                else iter left (max:result)


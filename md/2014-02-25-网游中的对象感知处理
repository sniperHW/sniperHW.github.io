下面首先提出几个问题：

+ 玩家在游戏中到处游览，周围其它对象的行为是如何让这个玩家看到的
+ 游戏中的AI对象，如何知道它周围有哪些对象存在
+ 如果游戏中有陷阱类的功能，如何知道一个对象是否落入了陷阱区域

上述问题，都可以统一的称为范围感知问题.

对于第一个问题，如果一个对象A处于对象B的感知范围内，那么A的所有行为都应该发送给B,使得B能看到A的行为.

对于第二个问题，如果对象A处于AI对象B的感知范围，那么A就是可供B的AI选的对象

对于第三个问题，如果对象A处于陷阱对象B的感知范围，那么就可以认为A落入了陷阱区域

显然对于上述所有问题，可以通过遍历地图的对象列表，两两判断是否处于对方的感知范围内.但这样做的算法复杂度是N^2,应该有方法可以减少这个对象遍历的数量.


通过将大地图分成一个个小的网格，将坐标范围在网格范围内的对象交给网格管理，可以有效的减少遍历的对象数量，因为一般来说对象的感知范围是有限的，它不需要关注整个地图上的其它对象，只需要关注它周围一小块区域就足够了.

下面将开始着重介绍基于网格划分的感知处理。


首先需要将地图划分成一个二维网格,例如对于100X100的地图，划分成边长为1的小正方形，那么这张地图就由一个10000个网格组成.
使用正方形的二维网格划分有一个巨大的好处，那就是很容易通过坐标计算出一个对象当前应该处于哪个管理网格.例如对象A当前的坐标是(1,2),
那么它当前所处的管理网格下标也是(1,2).


现在看下对象进入地图的时候应该做些什么处理.假设对象A进入地图时的坐标是(10,11),它的感知范围是周围8个网格+自己所处的网格=9个网格.
则当A进入地图时，需要遍历(9,10),(10,10),(11,10),(9,11),(10,11),(11,11),(9,12),(10,12),(11,12)这9个网格中的所有对象，将它们加入到A的感知列表中,我们假设其它这些对象的感知范围跟A一样，所以也需要将A添加到其它对象的感知列表中.

如果A当前在(10,11)并离开地图,那么需要做的就是是将A从(9,10),(10,10),(11,10),(9,11),(10,11),(11,11),(9,12),(10,12),(11,12)这9个网格中的所有对象的感知列表中移除.

进入和离开过程都是简单的，移动的处理就稍微复杂点.因为在A的移动过程中，A可能会从一个网格跨越到另外一个网格,如下图所示:

	---------------------
	|0,0|1,0|2,0|3,0|4,0|                                                    
	|--------------------
	|0,1|1,1|2,1|3,1|4,1|             
	|--------------------
	|0,2|1,2|2,2|3,2|4,2|
	|--------------------
	|0,3|1,3|2,3|3,3|4,3|
	---------------------

	A最从(1,1)移动到(2,2)开始时A的感知范围是 

	-------------
	|0,0|1,0|2,0|                                                
	|------------
	|0,1|1,1|2,1|             
	|------------
	|0,2|1,2|2,2|
	|------------
	
	到达(2,2)之后A的感知范围是
                                                
	-------------
	|1,1|2,1|3,1|             
	|------------
	|1,2|2,2|3,2|
	|------------
	|1,3|2,3|3,3|
	-------------

也就是说，在移动过程中，A的感知范围中减少了(0,0),(1,0),(2,0),(0,1),(0,2) 增加了 (3,1),(3,2),(1,3),(2,3),(3,3)

我们需要做的就是将A从(0,0),(1,0),(2,0),(0,1),(0,2)中所有对象的感知列表中删除，同时将这些对象从A的感知列表中删除.同时，将
(3,1),(3,2),(1,3),(2,3),(3,3)中所有对象添加到A的感知列表中，通知将A添加到这些对象的感知列表中.


上面介绍的只是网格管理的基本概念，在实际的游戏中没那么简单，例如一般来说，对象的感知范围是变化的，例如A的感知范围是10米，而B的是20米，则当A进入B感知范围的时候，B并没有进入A的感知范围.

[KendeyNet](https://github.com/sniperHW/KendyNet/blob/master/kendynet/game/aoi.h)中有用C语言编写的实现，有兴趣的朋友可以看下.

